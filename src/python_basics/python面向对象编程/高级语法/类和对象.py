"""
类和对象
什么是类
在面向对象编程中，类 Class 是一种定义现实事物属性和方法的蓝图或模板。类描述了现实事物的特征 属性 和行为 方法。可以把类看作是创建现实事物的原型。

类是现实事物的抽象，它定义了一类具有相似特征和行为的事物的通用结构和行为。类提供了对象所需的状态和行为，并定义了对象的初始化、操作和销毁等方法。

类由属性（也称为成员变量）和方法组成。属性是类的特征，用于描述类的状态。方法是定义在类中的函数，用于描述类的行为和操作。

通过使用类，我们可以创建多个具有相同属性和方法的对象。类中的属性和方法是相对独立的，每个对象都有自己的属性副本，但共享类中的方法。

例如，我们可以定义一个名为 Person 的类，该类可以有属性如姓名、年龄、性别等，方法如获取姓名、修改年龄、输出个人信息等。然后，我们可以创建多个实例（对象）来表示不同的人，每个实例都有自己的姓名、年龄和性别。

通过类的封装和抽象，可以更好地组织和管理代码，提高代码的可读性、可维护性和重用性。类是面向对象编程的重要概念之一。

什么是对象
在面向对象编程中，对象（Object）是类的一个实例。对象是具体存在的，具有状态和行为的实体。

可以把类看作是对象的模板或蓝图，描述了对象应该具有的属性和方法。当我们通过类创建一个具体的实例时，这个实例就是一个对象。

对象有两个关键的特征：状态和行为。

状态（State）：对象的状态由它的属性（也称为成员变量）决定，属性表示了对象的特点和特征。例如，一个人对象的状态可以包括姓名、年龄、性别等属性，这些属性的值可以根据对象的实际情况而不同。

行为（Behavior）：对象的行为由它的方法（也称为成员函数）决定，方法表示了对象能够执行的操作和行为。例如，一个人对象的行为可以包括走路、说话、工作等方法，通过调用这些方法可以让对象执行相应的行为。

对象是类的实例，可以根据类的定义创建多个对象。每个对象都有自己的属性值，在相同的类下，不同的对象可以具有不同的状态和行为。

通过对象，我们可以对数据进行封装和操作，通过对象之间的交互和消息传递，实现程序的逻辑和功能。

总结来说，对象是具体的实体，具有属性和方法。它是类的一个实例，通过类定义可以创建多个对象。对象是面向对象编程的核心和基本单位，通过对象的封装和抽象，我们可以更好地组织和管理代码。
"""


# 类的定义
# Python 使用 class 关键字来创建一个新类，class 之后为类的名称。
# Python 存在一个根类 object 类，所有的类都由根类派生而来，如果自定义类继承于根类，可以省略。
# 格式：
class ClassName:
    pass


# 或
class ClassName(object):
    pass


# 示例：
class Plane(object):
    def flying(self, hour):
        print(f"飞机已飞行{hour} 小时。。。")


# 实例对象
# 一个类定义好了，还不能使用，比如系统的 list 类，类只是规定了该类型的数据具有什么特征和行为，而真正要去使用这些特征和行为，必须有一个真实的列表存在。
# 实例对象本质上就是使用自定义类型去声明一个变量
# 格式：实例对象名 = 类名()
class Person(object):
    def run(self, m):
        print(f"人跑了{m} 米")


# 实例了两个对象
airPlane1 = Plane()
airPlane2 = Plane()

person1 = Person()
person2 = Person()

print(id(airPlane1), id(airPlane2), id(person1), id(person2))

# 使用不同的对象调用了类中的方法
airPlane1.flying(3)
airPlane1.flying(5)
airPlane2.flying(9)

person1.run(300)
person2.run(100)

Person.run(person2, 1000)  # 系统是这么调用的，我们不建议这么写
