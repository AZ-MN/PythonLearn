"""
面向对象概念
Python面向对象的概念
简介
面向过程编程（Procedural Programming）是一种基于过程或函数的编程范式。

它将程序视为一系列的顺序执行的过程或函数，每个过程或函数完成特定的任务，通过调用其他过程或函数来协同工作。

在面向过程编程中，数据和函数（过程）是分离的，函数可以直接访问和操作数据。

在面向过程编程中，程序的执行流程通过顺序、条件判断、循环等语句来控制。常用的编程语言，如 C、Fortran 和 Pascal，都是面向过程编程语言。

面向过程编程的特点包括：

强调任务和步骤：面向过程编程将程序划分为一系列的任务或步骤，这些任务按照顺序执行，以完成特定的功能。

数据与函数分离：在面向过程编程中，数据和函数（过程）是分离的，函数在需要时对数据进行操作。

直接操作数据：函数在执行过程中可以直接访问和操作数据，这样可能会导致数据在多个地方被访问和修改，增加了代码的复杂性和维护的困难。

代码复用：通过将常用的代码片段封装成函数，实现代码的复用。

执行效率：由于没有面向对象编程中的对象创建、继承和多态等机制，面向过程编程通常可以更高效地执行。

面向过程编程适用于简单的任务和较小规模的项目，它注重问题的解决步骤和过程化的思维。它可以提供较好的性能，但对于复杂的系统和大型项目，面向对象编程更适合，因为面向对象编程更加灵活、可扩展和易于维护。

面向对象编程
面向对象编程（Object-Oriented Programming，OOP）是一种基于对象的编程范式。

它将程序视为一组相互作用的对象，每个对象都有自己的属性（数据）和方法（行为）。

通过对象之间的交互和消息传递，来完成任务和解决问题。

在面向对象编程中，将真实世界中的事物抽象成对象，并通过定义对象的类来描述对象的属性和方法。类是对象的模板，描述了对象共有的属性和可以执行的方法。通过创建类的实例（即对象），可以使用该实例的属性和方法。

面向对象编程的特点包括：

封装性（Encapsulation）：将数据和对数据的操作封装在对象中，仅向外部暴露必要的接口，隐藏了内部的实现细节。

继承性（Inheritance）：通过继承机制，可以从已存在的类派生出新的类，新类自动获得了父类的属性和方法，并可以在此基础上进行扩展和修改。

多态性（Polymorphism）：同一种类型的对象在不同的上下文中可以有不同的行为，即在不同的情况下可以使用相同的接口来实现不同的功能。

类与对象：类是对象的模板，描述了对象的属性和方法。对象是类的实例，通过类创建的实例可以访问和操作该类定义的属性和方法。

信息传递：面向对象编程通过消息传递的方式实现对象之间的交互和通信。

面向对象编程具有代码模块化、可维护性、灵活性和可复用性的优点，它适用于复杂的系统和大规模的项目。常用的面向对象编程语言有Java、C++、Python等。使用面向对象编程可以更好地组织和抽象问题域，提高代码的可读性、可维护性和扩展性。

面向过程编程与面向对象编程的区别
面向过程编程（Procedural Programming）和面向对象编程（Object-Oriented Programming）是两种不同的编程范式，它们在思想、设计和实现上存在一些重要的区别。

抽象程度：面向过程编程将程序划分为一系列的过程或函数，通过函数之间的调用来完成任务。而面向对象编程将程序看作是一组相互作用的对象，每个对象都有其自己的属性和行为。

封装性：面向过程编程强调的是数据和函数的分离，函数可以直接访问和操作数据。而面向对象编程通过封装将数据和对数据的操作绑定在一起，只暴露出必要的接口，隐藏了内部的具体实现细节。

继承性：面向对象编程具有继承的特性，可以通过继承机制从已存在的类派生出新的类，并继承父类的属性和方法，以实现代码的重用和扩展。而面向过程编程没有继承的概念，代码重用通常通过函数的封装和复用来实现。

多态性：面向对象编程支持多态，即同一种类型的对象在不同的上下文中可以有不同的行为。这使得代码更加灵活和可扩展。而面向过程编程没有多态的概念，需要通过条件语句来实现不同情况的处理。

设计思想：面向对象编程注重的是问题领域的建模和抽象，关注对象之间的关系和交互。而面向过程编程更加注重问题的解决步骤和过程化的思维。

选择面向过程还是面向对象编程，取决于具体的需求和项目情况。面向对象编程更适合复杂的系统和大规模的项目，能够提高代码的模块化、可维护性和扩展性；而面向过程编程则更适合简单的任务和较小规模的项目，可以减少不必要的复杂性。
"""

nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

sorted(nums)

nums.sort()

# 面向过程
def add(a, b):
    return a + b

# 面向对象
a.add(b)